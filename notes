02/28/18:

- Development of NeuralNetwork class seems to be stuck.
--> Should switch to use of TensorFlow and then focus on data generation and training.

About the training:
- Board which represent chess mate should be trained over more iterations, so that NN can almost 100% flawlessly predict
    the winner in a chess mate situation


02/15/18:

- need to use np.dot(a,b) for performing matrix multiplication!!!

02/12/18:

- Don't implement complete chess computer from scratch
==> use of chess engine for python

- AI:
    -> Evaluation of moves and not for outputting moves
    -> Engine will generate moves and AI will tell, whether move is good
    -> Choose Move with the highest ranking

- NN:
-- Input - current board and move
-- Output - binary, whether will lead to victory or not

----
---
--
    Idea: Not necessary to input the move AND the state of the board
        --> better just input resulting board and evaluate that!
        --> Also needs to input the color of the person at turn
            ==> BETTER: always have NN output percentage of WHITE to win

QUESTION:   - Are the moves of BLACK necessary for WHITE to win?

    Training Process:
        --> Have Engine generate games and moves
        --> Create log of board positions and save whether WHITE or BLACK won
        --> Train NN with every board position and the label 0 (WHITE lost) or 1 (WHITE won)
--
---
----
(Anand: Whatever can be solved using a database system can be solved using a neural network)